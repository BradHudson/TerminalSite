import { ProvidersConfig } from '@blotoutio/cdn/types'

export {
  InitParams,
  TagParams,
  ManifestRule,
  Manifest,
  ProviderInit,
  SendTag,
  Data,
  EventOptions,
  PersistType,
  ConfigOptions,
  ConsentOptions,
  KeysCallback,
  KeysOptions,
  GetDataCallback,
  Configs,
  GetConsentCallback,
  GetConsentOptions,
  GetDataOptions,
  IsNewUserOptions,
  GetUserIdOptions,
  ReadyCallback,
} from '@blotoutio/shared/utility-sdk'

export type UserKey =
  | 'email'
  | 'phone'
  | 'firstName'
  | 'lastName'
  | 'gender'
  | 'dateOfBirth'
  | 'country'
  | 'state'
  | 'city'
  | 'zip'
  | 'address'

export type Stub = { name: string; arguments: unknown[] }

export type InitPreferences = {
  edgeURL: string
  disableConsentCheck?: boolean
  userId?: string
  fallbackUserId?: string
  storageId?: number
  providers?: ProviderInit[]
  afterManifestEvents?: Stub[]
  skipZeroPurchaseEvent?: boolean
  sessionId?: string
}

export declare const init: (preferences: InitPreferences) => void

export declare const tag: (
  name: string,
  data?: Data,
  providers?: ProvidersConfig,
  options?: EventOptions
) => void

export declare const consent: (consent: Data, options: ConsentOptions) => void

export declare const user: (
  key: UserKey,
  value: string,
  providers?: ProvidersConfig,
  options?: UserOptions
) => void

export declare const data: (
  data: Record<string, string>,
  providers?: ProvidersConfig,
  options?: EventOptions
) => void

export declare const getData: (
  keys: string[],
  callback: GetDataCallback,
  options?: GetDataOptions
) => void

export declare const keys: (
  callback: KeysCallback,
  options?: KeysOptions
) => void

export declare const getUserId: (options?: GetUserIdOptions) => string

export declare const isNewUser: (
  options?: IsNewUserOptions
) => boolean | undefined

export declare const setConfig: (
  config: Configs,
  options?: ConfigOptions
) => void

export declare const getConsent: (
  callback: GetConsentCallback,
  options?: GetConsentOptions
) => void

export declare const ready: (callback: ReadyCallback) => void

export declare global {
  interface Window {
    edgetagData: Record<string, string>
  }
}
